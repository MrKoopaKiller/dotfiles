# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{
font_family      SauceCodePro Nerd Font Mono
bold_font        auto
italic_font      auto
bold_italic_font auto

font_size 14.0
cursor_shape underline
scrollback_lines 20000
detect_urls yes
show_hyperlink_targets no
underline_hyperlinks hover
copy_on_select no
#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

# paste_actions quote-urls-at-prompt,confirm

#: A comma separated list of actions to take when pasting text into
#: the terminal. The supported paste actions are:
#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs shell_integration).
#: replace-dangerous-control-codes
#:     Replace dangerous control codes from pasted text, without confirmation.
#: replace-newline
#:     Replace the newline character from pasted text, without confirmation.
#: confirm:
#:     Confirm the paste if the text to be pasted contains any terminal control codes
#:     as this can be dangerous, leading to code execution if the shell/program running
#:     in the terminal does not properly handle these.
: confirm-if-large
#:     Confirm the paste if it is very large (larger than 16KB) as pasting
#:     large amounts of text into shells can be very slow.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.

strip_trailing_spaces never
select_by_word_characters @-./_~?&=%+#
# select_by_word_characters_forward

focus_follows_mouse yes
pointer_shape_when_grabbed arrow
: terminal grabs the mouse.
default_pointer_shape beam
pointer_shape_when_dragging beam
enable_audio_bell yes
visual_bell_duration 0.0
visual_bell_color white
window_alert_on_bell yes
bell_on_tab "ðŸ”” "
window_border_width 0.5pt
draw_minimal_borders yes

confirm_os_window_close 0

tab_bar_edge bottom
tab_bar_style slant

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.


# tab_bar_background none
# tab_bar_margin_color none

#: Color scheme {{{

# foreground #dddddd
# background #000000

#: The foreground and background colors.

background_opacity 0.7
background_blur 70
dynamic_background_opacity no

# shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files. Environment
#: variables are expanded in this setting.

editor vim